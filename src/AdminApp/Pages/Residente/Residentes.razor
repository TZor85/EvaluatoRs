@page "/residentes"
@*@inject ResidentesService residenteService*@
@inject ResidenteService Service;
@inject IModalService Modal
@inject NavigationManager NavigationManager
@using AdminApp.Models.Residentes;
@using Syncfusion.EJ2.Blazor.Navigations
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Notifications
@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.DropDowns



<EjsToast @ref="@ToastObj" Target="#toasttarget">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</EjsToast>


<div class="col-md-12 row">
    <div class="card">
        <div class="card-header bg-azul-claro text-white font-weight-bold">
            Residentes
        </div>
        <div class="card-body">
            <div class="my-md-3">
                <EjsGrid @ref="Grid" ModelType="@SelectedData" DataSource="@data" AllowSorting="true" AllowPaging="true" Toolbar="@(new string[]{"Add", "Search"})" SearchSettings="@searchSettings">
                    <GridEditSettings AllowEditing="true" AllowAdding="true" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
                    <GridEvents CommandClicked="OnCommandClicked" OnActionBegin="OnActionBegin" RowSelected="RowSelectHandler" TValue="Residente"></GridEvents>
                    <GridPageSettings PageSize="10"></GridPageSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(Residente.Id) HeaderText="Id" IsPrimaryKey="true" IsIdentity="true" Width="50" Visible="false"></GridColumn>
                        <GridColumn Field=@nameof(Residente.FirstName) HeaderText="Nombre"></GridColumn>
                        <GridColumn Field=@nameof(Residente.LastName) HeaderText="Apellidos"></GridColumn>
                        <GridColumn Field=@nameof(Residente.YearResident) HeaderText="Año residencia"></GridColumn>
                        <GridColumn Field=@nameof(Residente.Especialidad) ForeignKeyField="Id" ForeignKeyValue="Descripcion" DataSource="@TipoEspecialidad" EditType="EditType.DropDownEdit" HeaderText="Especialidad"></GridColumn>
                        <GridColumn HeaderText="Evaluación" Width="100" TextAlign="TextAlign.Left">
                            <GridCommandColumns>
                                <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { Content = "Evaluar", CssClass = "e-success" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                        <GridColumn HeaderText="Acciones" Width="150" TextAlign="TextAlign.Left">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-primary" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-danger" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </EjsGrid>

            </div>
        </div>
    </div>
</div>


@code {
    private EjsToast ToastObj;
    private EjsGrid<Residente> Grid;
    private GridSearchSettings searchSettings = new GridSearchSettings() { Fields = new string[] { "FirstName", "LastName" }, IgnoreCase = true, IgnoreAccent = true, Operator = Operator.Contains };

    private List<Residente> data { get; set; }
    private Residente SelectedData { get; set; }
    private Residente SelectedDataSinCambios { get; set; }

    private string firstName { get; set; } = string.Empty;
    private string lastName { get; set; } = string.Empty;
    private int yearResidencia { get; set; } = 1;
    private int especialidad { get; set; } = 0;


    public List<TipoEspecialidad> TipoEspecialidad = new List<TipoEspecialidad>
{
        new TipoEspecialidad() { Id = 1, Descripcion = "Medicina Familiar y Comunitaria"},
        new TipoEspecialidad() { Id = 2, Descripcion = "Anestesiología y Reanimación"},
        new TipoEspecialidad() { Id = 3, Descripcion = "Medicina Interna"},
        new TipoEspecialidad() { Id = 4, Descripcion = "Cardiología"},
        new TipoEspecialidad() { Id = 5, Descripcion = "Neumología"},
        new TipoEspecialidad() { Id = 6, Descripcion = "Medicina Intensiva"},
        new TipoEspecialidad() { Id = 7, Descripcion = "Cirugía General"},
        new TipoEspecialidad() { Id = 8, Descripcion = "Radiodiagnóstico"},
        new TipoEspecialidad() { Id = 9, Descripcion = "Cirugía Ortopédica y Traumatología"},
        new TipoEspecialidad() { Id = 10, Descripcion = "Medicina Preventiva"},
        new TipoEspecialidad() { Id = 11, Descripcion = "Oncología Radioterápica"},
        new TipoEspecialidad() { Id = 12, Descripcion = "Medicina Nuclear"},
        new TipoEspecialidad() { Id = 13, Descripcion = "Psiquiatría"},
        new TipoEspecialidad() { Id = 14, Descripcion = "Urologia"},
        new TipoEspecialidad() { Id = 15, Descripcion = "Oncología Médica"},
        new TipoEspecialidad() { Id = 16, Descripcion = "Dermatología"},
    };

    protected override async Task OnInitializedAsync()
    {
        data = await Service.GetResidentesAsync();
    }

    private void RowSelectHandler(RowSelectEventArgs<Residente> args)
    {
        this.SelectedData = data.Where(x => x.Id == args.Data.Id).FirstOrDefault();
    }

    public void OnActionBegin(ActionEventArgs<Residente> args)
    {
        if (args.RequestType == Syncfusion.EJ2.Blazor.Grids.Action.BeginEdit)
        {


            args.Cancel = true;
        }
        else if (args.RequestType == Syncfusion.EJ2.Blazor.Grids.Action.Add)
        {
            args.Cancel = true;

            this.SelectedData = new Residente() { Id = 0, FirstName = "", LastName = "", YearResident = 1, Especialidad = 0 };
            ShowModal(Estado.nuevo);
        }

    }

    public void ActionFailureHandler(Syncfusion.EJ2.Blazor.Grids.FailureEventArgs args)
    {
        var toast = new ToastModel() { Title = "Error!", Content = args.Error.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
        this.ToastObj.Show(toast);
    }

    public void OnCommandClicked(CommandClickEventArgs<Residente> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.Delete)
        {
            ShowModal(Estado.borrar);
        }

        if (args.CommandColumn.Type == CommandButtonType.Edit)
        {
            ShowModal(Estado.editar);
        }

        if (args.CommandColumn.ButtonOption.Content == "Evaluar")
        {
            NavigationManager.NavigateTo("/evaluacionResidente/" + args.RowData.Id, true);
        }

    }

    void ShowModal(Estado estado)
    {
        var parameters = new ModalParameters();

        parameters.Add("Residente", this.SelectedData);
        parameters.Add("Estado", estado);

        var options = new ModalOptions() { HideHeader = true, HideCloseButton = false };

        Modal.OnClose += ModalClosed;
        if (estado == Estado.nuevo)
        {
            Modal.Show<AddResidente>("Nuevo", parameters, options);
        }
        else if (estado == Estado.editar)
        {
            firstName = this.SelectedData.FirstName;
            lastName = this.SelectedData.LastName;
            yearResidencia = this.SelectedData.YearResident;
            especialidad = this.SelectedData.Especialidad.Value;

            Modal.Show<EditResidente>("Editar", parameters, options);
        }
        else
        {
            parameters.Add("Message", "¿Seguro que quiere eliminar este residente?");
            parameters.Add("YesText", "Eliminar");
            parameters.Add("NoText", "Cancelar");

            Modal.Show<ConfirmDelete>("Confirmación de borrado", parameters);
        }

    }

    void ModalClosed(ModalResult modalResult)
    {
        Residente obj = (Residente)modalResult.Data;

        if (!modalResult.Cancelled)
        {
            if (modalResult.Data != null && obj.Id == -1)
            {
                this.data.Remove(obj);
                this.Grid.Refresh();
            }
            else
            {
                if (modalResult.Data != null && (obj.Id == 0))
                {
                    obj.Id = this.data.Max(x => x.Id) + 1;
                    this.Grid.AddRecord(obj);
                }
                else
                {
                    this.Grid.UpdateRow(1, modalResult.Data);
                }
            }
        }
        else
        {
            this.SelectedData.FirstName = firstName;
            this.SelectedData.LastName = lastName;
            this.SelectedData.YearResident = yearResidencia;
            this.SelectedData.Especialidad = especialidad;
        }

        Modal.OnClose -= ModalClosed;
    }

}


