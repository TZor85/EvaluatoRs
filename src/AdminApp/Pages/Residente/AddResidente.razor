@inject ResidenteService Service;
@inject IModalService Modal
@inject IModalService ModalService
@using AdminApp.Models.Residentes
@using Syncfusion.EJ2.Blazor.Notifications
@using Syncfusion.EJ2.Blazor.Inputs


<EjsToast @ref="@ToastObj" Target="#toasttarget">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</EjsToast>

<div id="EditarResidente">
    <div class="col-md-12 col-lg-12 col-sm-12 row mx-0">
        @*<div class="col-md-12 col-lg-12 col-sm-12 pl-0">*@
        <div class="card">
            <EditForm Model="@residente" OnValidSubmit="@HandleValidSubmit">
                <div class="card-header bg-azul-claro text-white font-weight-bold">
                    @(string.IsNullOrWhiteSpace(residente.FirstName) ? "Nuevo Residente" : residente.LastName + ", " + residente.FirstName)
                </div>

                <div class="card-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <EjsTextBox @ref="NombreTextBox" @bind-Value="@(residente.FirstName)" Placeholder="Nombre" FloatLabelType="@FloatLabelType.Auto"></EjsTextBox>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <EjsTextBox @ref="ApellidoTextBox" @bind-Value="@(residente.LastName)" Placeholder="Apellidos" FloatLabelType="@FloatLabelType.Auto"></EjsTextBox>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <EjsNumericTextBox @bind-Value="@(residente.YearResident)" Placeholder="Año residencia" FloatLabelType="@FloatLabelType.Auto"></EjsNumericTextBox>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <EjsDropDownList ID="TipoEspecialidad" @bind-Value="@(residente.Especialidad)" DataSource="@DropDownTipoEspecialidad" Placeholder="Especialidad" FloatLabelType="@FloatLabelType.Auto">
                                <DropDownListFieldSettings Value="Id" Text="Descripcion"></DropDownListFieldSettings>
                            </EjsDropDownList>
                        </div>
                    </div>
                </div>

            </EditForm>
        </div>
        @*</div>*@

    </div>

    <div class="col-md-12 row mx-0 mt-2">
        <button @onclick="@HandleValidSubmit" class="e-control e-btn e-lib e-primary mx-2">Guardar</button>
        <button @onclick="@Cancel" class="e-control e-btn e-lib e-secondary mx-2">Cancelar</button>
    </div>

</div>

@code {

    public Residente residente { get; set; } = new Residente();
    private EjsToast ToastObj;

    private EjsTextBox NombreTextBox;
    private EjsTextBox ApellidoTextBox;

    public class TipoEspecialidad
    {
        public int Id { get; set; }
        public string Descripcion { get; set; }
    }

    public List<TipoEspecialidad> DropDownTipoEspecialidad = new List<TipoEspecialidad>
{
        new TipoEspecialidad() { Id = 1, Descripcion = "Medicina Familiar y Comunitaria"},
        new TipoEspecialidad() { Id = 2, Descripcion = "Anestesiología y Reanimación"},
        new TipoEspecialidad() { Id = 3, Descripcion = "Medicina Interna"},
        new TipoEspecialidad() { Id = 4, Descripcion = "Cardiología"},
        new TipoEspecialidad() { Id = 5, Descripcion = "Neumología"},
        new TipoEspecialidad() { Id = 6, Descripcion = "Medicina Intensiva"},
        new TipoEspecialidad() { Id = 7, Descripcion = "Cirugía General"},
        new TipoEspecialidad() { Id = 8, Descripcion = "Radiodiagnóstico"},
        new TipoEspecialidad() { Id = 9, Descripcion = "Cirugía Ortopédica y Traumatología"},
        new TipoEspecialidad() { Id = 10, Descripcion = "Medicina Preventiva"},
        new TipoEspecialidad() { Id = 11, Descripcion = "Oncología Radioterápica"},
        new TipoEspecialidad() { Id = 12, Descripcion = "Medicina Nuclear"},
        new TipoEspecialidad() { Id = 13, Descripcion = "Psiquiatría"},
        new TipoEspecialidad() { Id = 14, Descripcion = "Urologia"},
        new TipoEspecialidad() { Id = 15, Descripcion = "Oncología Médica"},
        new TipoEspecialidad() { Id = 16, Descripcion = "Dermatología"},
    };


    void Cancel()
    {
        ModalService.Close(ModalResult.Cancel());
    }

    void SaveResidente()
    {
        ModalService.Close(ModalResult.Ok<Residente>(residente));

    }

    private void HandleValidSubmit()
    {
        if (residente.YearResident < 1 || residente.YearResident > 5)
        {
            var toast = new ToastModel() { Title = "Año de residencia!", Content = "El año de residencia debe estar entre 1 y 5.", CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
            this.ToastObj.Show(toast);
            return;
        }

        ModalService.Close(ModalResult.Ok<Residente>(this.residente));
    }
}
